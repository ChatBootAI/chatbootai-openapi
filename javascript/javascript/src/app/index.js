/**
 * ChatBootAI
 * This is ChatBootAI specification described as OpenAPI 3.0.  ChatBoot AI allows you to interact with several user interface and back-ends following the same OpenAPI contract.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ChatError from './ai.chatboot.model/ChatError';
import ChatRequest from './ai.chatboot.model/ChatRequest';
import ChatRequestMessage from './ai.chatboot.model/ChatRequestMessage';
import ChatResponse from './ai.chatboot.model/ChatResponse';
import ChatResponseChoice from './ai.chatboot.model/ChatResponseChoice';
import ChatResponseMessage from './ai.chatboot.model/ChatResponseMessage';
import ChatAPI from './ai.chatboot.api/ChatAPI';


/**
* This is ChatBootAI specification described as OpenAPI 3.0.  ChatBoot AI allows you to interact with several user interface and back-ends following the same OpenAPI contract..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ChatBootAi = require('index'); // See note below*.
* var xxxSvc = new ChatBootAi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ChatBootAi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ChatBootAi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ChatBootAi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ChatError model constructor.
     * @property {module:ai.chatboot.model/ChatError}
     */
    ChatError,

    /**
     * The ChatRequest model constructor.
     * @property {module:ai.chatboot.model/ChatRequest}
     */
    ChatRequest,

    /**
     * The ChatRequestMessage model constructor.
     * @property {module:ai.chatboot.model/ChatRequestMessage}
     */
    ChatRequestMessage,

    /**
     * The ChatResponse model constructor.
     * @property {module:ai.chatboot.model/ChatResponse}
     */
    ChatResponse,

    /**
     * The ChatResponseChoice model constructor.
     * @property {module:ai.chatboot.model/ChatResponseChoice}
     */
    ChatResponseChoice,

    /**
     * The ChatResponseMessage model constructor.
     * @property {module:ai.chatboot.model/ChatResponseMessage}
     */
    ChatResponseMessage,

    /**
    * The ChatAPI service constructor.
    * @property {module:ai.chatboot.api/ChatAPI}
    */
    ChatAPI
};
