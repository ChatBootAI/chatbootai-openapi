/**
 * ChatBootAI
 * This is ChatBootAI specification described as OpenAPI 3.0.  ChatBoot AI allows you to interact with several user interface and back-ends following the same OpenAPI contract.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChatRequestMessage model module.
 * @module ai.chatboot.model/ChatRequestMessage
 * @version 0.0.1
 */
class ChatRequestMessage {
    /**
     * Constructs a new <code>ChatRequestMessage</code>.
     * @alias module:ai.chatboot.model/ChatRequestMessage
     * @param content {String} The contents of the system message.
     * @param role {module:ai.chatboot.model/ChatRequestMessage.RoleEnum} The role of the messages author.
     */
    constructor(content, role) { 
        
        ChatRequestMessage.initialize(this, content, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, role) { 
        obj['content'] = content;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>ChatRequestMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:ai.chatboot.model/ChatRequestMessage} obj Optional instance to populate.
     * @return {module:ai.chatboot.model/ChatRequestMessage} The populated <code>ChatRequestMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatRequestMessage();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatRequestMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatRequestMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatRequestMessage.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

ChatRequestMessage.RequiredProperties = ["content", "role"];

/**
 * The contents of the system message.
 * @member {String} content
 */
ChatRequestMessage.prototype['content'] = undefined;

/**
 * The role of the messages author.
 * @member {module:ai.chatboot.model/ChatRequestMessage.RoleEnum} role
 */
ChatRequestMessage.prototype['role'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
ChatRequestMessage['RoleEnum'] = {

    /**
     * value: "system"
     * @const
     */
    "system": "system",

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "assistant"
     * @const
     */
    "assistant": "assistant",

    /**
     * value: "function"
     * @const
     */
    "function": "function"
};



export default ChatRequestMessage;

