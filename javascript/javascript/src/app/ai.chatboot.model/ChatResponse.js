/**
 * ChatBootAI
 * This is ChatBootAI specification described as OpenAPI 3.0.  ChatBoot AI allows you to interact with several user interface and back-ends following the same OpenAPI contract.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatResponseChoice from './ChatResponseChoice';

/**
 * The ChatResponse model module.
 * @module ai.chatboot.model/ChatResponse
 * @version 0.0.1
 */
class ChatResponse {
    /**
     * Constructs a new <code>ChatResponse</code>.
     * Represents the chat response returned by the model, based on the provided chat request.
     * @alias module:ai.chatboot.model/ChatResponse
     * @param choices {Array.<module:ai.chatboot.model/ChatResponseChoice>} A list of chat completion choices. Can be more than one.
     * @param object {module:ai.chatboot.model/ChatResponse.ObjectEnum} The object type, which is always \"chat\"
     */
    constructor(choices, object) { 
        
        ChatResponse.initialize(this, choices, object);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, choices, object) { 
        obj['choices'] = choices;
        obj['object'] = object;
    }

    /**
     * Constructs a <code>ChatResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:ai.chatboot.model/ChatResponse} obj Optional instance to populate.
     * @return {module:ai.chatboot.model/ChatResponse} The populated <code>ChatResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('choices')) {
                obj['choices'] = ApiClient.convertToType(data['choices'], [ChatResponseChoice]);
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['choices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['choices'])) {
                throw new Error("Expected the field `choices` to be an array in the JSON data but got " + data['choices']);
            }
            // validate the optional field `choices` (array)
            for (const item of data['choices']) {
                ChatResponseChoice.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }

        return true;
    }


}

ChatResponse.RequiredProperties = ["choices", "object"];

/**
 * A unique identifier for the completion.
 * @member {String} id
 */
ChatResponse.prototype['id'] = undefined;

/**
 * A list of chat completion choices. Can be more than one.
 * @member {Array.<module:ai.chatboot.model/ChatResponseChoice>} choices
 */
ChatResponse.prototype['choices'] = undefined;

/**
 * The object type, which is always \"chat\"
 * @member {module:ai.chatboot.model/ChatResponse.ObjectEnum} object
 */
ChatResponse.prototype['object'] = undefined;

/**
 * The Unix timestamp (in seconds) of when the completion was created.
 * @member {Number} created
 */
ChatResponse.prototype['created'] = undefined;

/**
 * The model used for the chat completion.
 * @member {String} model
 */
ChatResponse.prototype['model'] = undefined;





/**
 * Allowed values for the <code>object</code> property.
 * @enum {String}
 * @readonly
 */
ChatResponse['ObjectEnum'] = {

    /**
     * value: "chat"
     * @const
     */
    "chat": "chat"
};



export default ChatResponse;

